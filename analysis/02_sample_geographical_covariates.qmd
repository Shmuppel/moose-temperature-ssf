---
title: "sample_geographical_covariates"
format: html
editor: visual
---

```{r}
#| label: packages
#| code-summary: "Loading packages"
#| message: false
#| warning: false

library(tidyverse)
packages <- c("amt", "lubridate", "sf", "terra", "glue", "tictoc")
walk(packages, require, character.only = T)
```

```{r}
load('../data/localisations/moose_random_steps.RData')
```

## 1. Load Covariate Rasters

```{r}
# Define the root directory where your rasters are stored
covariate_dir <- "../data/geographical_covariates"

# Get a list of all .tif files in the directory and subdirectories
covariate_files <- list.files(
  covariate_dir, 
  pattern = "\\.tif$", 
  full.names = TRUE, 
  recursive = TRUE
)

covariate_files
```

```{r}
# Load rasters and set NAflag
covariates <- list()

for (f in covariate_files) {
    r <- rast(f)
    
     # Check if the file is in the slu directory (e.g., 2010 or 2005 subdirectory)
    if (grepl("slu_forest_maps", f)) {
      # Extract the year from the folder (2005 or 2010) before the filename
      year <- basename(dirname(f))
      # Extract the covariate name by removing the .tif extension
      covariate_name <- paste(
        "slu", 
        year,
        tools::file_path_sans_ext(basename(f)), 
        sep = "_"
      )
    } else {
      # For other files, just remove the .tif extension
      covariate_name <- tools::file_path_sans_ext(basename(f))
    }
    
    # TODO probably fix in QGIS / externally
    if (covariate_name == "elevation") NAflag(r) <- 0

    covariates[[covariate_name]] <- r
    plot(r, main=covariate_name)
}
```

We create a generic wrapper function that makes it easier to extract covariates with settings that are of interest to us. We extract covariates at both the start and end of the step.

```{r}
sample_covariate <- function(steps_df, covariate_name) {
  tic()
  steps_df <- amt::extract_covariates(
    steps_df, 
    where="both",
    covariates=covariates[[covariate_name]] # the raster
  )
  timer_end = toc(quiet=T)$callback_msg
  print(glue('Finished sampling {covariate_name}, seconds elapsed: {timer_end}'))
  return(steps_df)
}
```

## 2. Sample Landuse Covariates

```{r}
for (covariate in names(covariates)) {
  if (!startsWith(covariate, "landuse")) next
  
  # Extract the year and determine the range
  covariate_year <- as.integer(sub(".*_(\\d{4}).*", "\\1", covariate))
  # We use the 2003 map for dates from 2003-2017 and the 2018 for newer dates
  covariate_year_range <- if (covariate_year == 2003) 2003:2017 else 2018:2024
  
  # Sample the landuse covariate (easier to just sample all the points)
  annotated_random_steps <- sample_covariate(moose_random_steps, covariate)
  
  # Logical mask for filtering rows within the year range
  mask <- year(moose_random_steps$t1_) %in% covariate_year_range
  
  # Assign values only to the filtered rows
  moose_random_steps[mask, c("landuse_start", "landuse_end")] <- 
    annotated_random_steps[mask, c("landuse_start", "landuse_end")]
}
```

We remove strata where the true step / location could not be matched with a landuse, these are unfortunately outside the extent of our analysis.

```{r}
n_before <- nrow(moose_random_steps)
moose_random_steps <- remove_incomplete_strata(moose_random_steps, col = "landuse_start")
n_after <- nrow(moose_random_steps)
n_removed <- n_before - n_after

print(glue(
  "Removed {n_removed} rows with incomplete strata in 'landuse_start'. ",
  "{n_after} rows remain."
))
```

### 2.2 Update landuse covariates with Felling data

```{r}
for (covariate in names(covariates)) {
  if (!startsWith(covariate, "felling")) next
  
  # Extract the year and determine the range
  covariate_year <- as.integer(sub(".*(\\d{4}).*", "\\1", covariate))
  covariate_year_range <- if (covariate_year == 2018) 2003:2018 else 2019:2024
  
  # Define column names
  annotated_colnames <- sprintf("%s_%s", covariate, c("start", "end"))
  annotated_random_steps <- sample_covariate(moose_random_steps, covariate)
  
  # Compute differences between localisation year and felling year, if both are available
  diff_start <- year(moose_random_steps$t1_) - annotated_random_steps[[annotated_colnames[1]]]
  diff_end <- year(moose_random_steps$t2_) - annotated_random_steps[[annotated_colnames[2]]]
  
  # Apply conditions: check non-NA values & ensure difference is in (0,10]
  # Difference > 0 means the localisation took place after felling
  # Difference > 10 means 10 years have passed since felling and we'll no longer consider it a clear-cut forest
  mask_start <- !is.na(diff_start) & !is.na(moose_random_steps$landuse_start) & diff_start > 0 & diff_start <= 10
  mask_end <- !is.na(diff_end) & !is.na(moose_random_steps$landuse_end) & diff_end > 0 & diff_end <= 10
  
  moose_random_steps[mask_start, "landuse_start"] <- 3
  moose_random_steps[mask_end, "landuse_end"] <- 3
  
  n_start_updated <- sum(mask_start, na.rm = TRUE)
  n_end_updated <- sum(mask_end, na.rm = TRUE)
  
  print(glue(
    "{covariate}: Updated {n_start_updated} rows for 'landuse_start' and {n_end_updated} rows for 'landuse_end' ",
    "due to felling before localization."
  ))
}
```

### 2.3 Recode landuse numbers to labels

```{r}
landuse_classes <- c(
  "Coniferous forest",
  "Dedicious & mixed forest",
  "Clear-cut & young forest",
  "Open",
  "Wetland",
  "Water bodies",
  "Anthropogenic",
  "Low mountain forest"
)
landuse_classes <- setNames(landuse_classes, 1:8)

moose_random_steps$landuse_start <- recode(moose_random_steps$landuse_start, !!!landuse_classes)
moose_random_steps$landuse_end <- recode(moose_random_steps$landuse_end, !!!landuse_classes)
```

## 3. Sample SLU Forest Covariates

```{r}
for (covariate in names(covariates)) {
  if (!startsWith(covariate, "slu")) next
  
  # Extract year and determine applicable range
  covariate_year <- as.integer(sub(".*_(\\d{4})_.*", "\\1", covariate))
  # We use the 2005 map for the dates from 2003-2009, and the 2010 map for newer dates
  covariate_year_range <- if (covariate_year == 2005) 2003:2009 else 2010:2024
  
  # Extract base covariate name
  covariate_base <- sub("slu_\\d{4}_", "", covariate)
  covariate_base_desired <- sub("_(\\d{4})_", "_", covariate)
  
  # Generate column names
  annotated_colnames <- sprintf("%s_%s", covariate_base, c("start", "end"))
  desired_colnames <- sprintf("%s_%s", covariate_base_desired, c("start", "end"))
  
  # Sample covariates
  annotated_random_steps <- sample_covariate(moose_random_steps, covariate)
  
  # Logical mask for filtering rows within the year range
  mask <- year(moose_random_steps$t1_) %in% covariate_year_range
  
  # Assign values only to the filtered rows
  moose_random_steps[mask, desired_colnames] <- 
    annotated_random_steps[mask, annotated_colnames]
}
```

## 4. Sampling General Terrain Covariates

```{r}
for (covariate in names(covariates)) {
  if (
    startsWith(covariate, "landuse") | 
    startsWith(covariate, "slu") | 
    startsWith(covariate, "felling")
  ) next
  moose_random_steps <- sample_covariate(moose_random_steps, covariate)
}
```

## 5. Export annotated localisations to CSV

```{r}
write.csv(moose_random_steps, '../data/localisations/moose_random_steps.csv')
```
