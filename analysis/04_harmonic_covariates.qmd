---
title: "04_harmonic_covariates"
format: html
editor: visual
bibliography: ../references.bib
---

```{r}
#| label: packages
#| code-summary: "Loading packages"
#| message: false
#| warning: false

library(tidyverse)
packages <- c("dplyr", "data.table", "amt")
walk(packages, require, character.only = T)
```

```{r}
set.seed(20240703) 
```

```{r}
results <- data.table::fread('../data/localisations/results.csv', header=F, sep=';', 
  col.names=c(
    "animal_id", "step_id_", "x1_", "x2_", "y1_", "y2_", "t1_", "t2_", 
    "temperature_start", "temperature_end"
  ))

results <- results %>%
    mutate(
      t1_ = if_else(
        str_detect(t1_, "\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"),
        as.character(t1_),
        paste0(t1_, " 00:00:00")
      ),
      t2_ = if_else(
        str_detect(t2_, "\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}"),
        as.character(t2_),
        paste0(t2_, " 00:00:00"),
      )
    ) %>% mutate(
      t1_ = ymd_hms(t1_, tz="Europe/Stockholm"),
      t2_ = ymd_hms(t2_, tz="Europe/Stockholm")
    )

moose_random_steps <- data.table::fread('../data/localisations/moose_random_steps.csv')
```

```{r}
moose_random_steps$t1_ <- force_tz(moose_random_steps$t1_, tz="Europe/Stockholm") + seconds(0)
moose_random_steps$t2_ <- force_tz(moose_random_steps$t2_, tz="Europe/Stockholm") + seconds(0)
moose <- results %>% left_join(
  y=moose_random_steps, 
  by=c("animal_id", "step_id_", "x2_", "y2_", "t1_", "t2_", "x1_", "y1_"),
  keep=F
)
```

Add sine / sine terms that can interacti with covariates to include temporal variation

```{r}
landuse_classes <- c(
  "Coniferous forest",
  "Dedicious & mixed forest",
  "Clear-cut & young forest",
  "Open",
  "Wetland",
  "Water bodies",
  "Anthropogenic",
  "Low mountain forest"
)

moose <- moose %>% mutate(
  landuse_start = factor(landuse_start, levels=landuse_classes),
  landuse_end = factor(landuse_end, levels=landuse_classes),
  strata = as.factor(strata),
  
  hour_s1_t1 = sin(2*pi*hour_t1/24),
  hour_s2_t1 = sin(4*pi*hour_t1/24),
  hour_s3_t1 = sin(6*pi*hour_t1/24),
  hour_c1_t1 = cos(2*pi*hour_t1/24),
  hour_c2_t1 = cos(4*pi*hour_t1/24),
  hour_c3_t1 = cos(6*pi*hour_t1/24),
  
  hour_s1_t2 = sin(2*pi*hour_t2/24),
  hour_s2_t2 = sin(4*pi*hour_t2/24),
  hour_s3_t2 = sin(6*pi*hour_t2/24),
  hour_c1_t2 = cos(2*pi*hour_t2/24),
  hour_c2_t2 = cos(4*pi*hour_t2/24),
  hour_c3_t2 = cos(6*pi*hour_t2/24)
)

```

```{r}
save(moose, file='../data/localisations/moose.RData')
```

```{r}
cor(moose$hour_s1_t2, moose$temperature_end, use = "complete.obs")
cor(moose$hour_c1_t2, moose$temperature_end, use = "complete.obs")
```

::: {#Preparing Model Data .panel-tabset}

\## 0p

```{r}
# Transmute all the columns that need to be scaled
unscaled_model_data <- moose %>% transmute(
  temp_start = temperature_start,
  temp_end = temperature_end,
  
  dist_to_water_end = distance_to_water_end,
  dist_to_water_end_temp = dist_to_water_end * temp_end,
  ruggedness_end = ruggedness_end,
  
  sl_ = sl_,
  log_sl_ = log(sl_),
  cos_ta_ = cos(ta_)
)

scaled_model_data <- scale(unscaled_model_data)
# save the scaling values to recover the natural scale of the coefficients
mean_vals <- attr(scaled_model_data, "scaled:center")
sd_vals <- attr(scaled_model_data, "scaled:scale")

scaling_attributes_0p <- data.frame(
  variable = names(unscaled_model_data), 
  mean = mean_vals, 
  sd = sd_vals
)

moose_data_scaled_0p <- data.frame(
  animal_id = moose$animal_id,  
  step_id = moose$step_id_, 
  case = moose$case_,
  
  landuse_end = moose$landuse_end,
  scaled_model_data
)
```

## 1p

```{r}
# Transmute all the columns that need to be scaled
unscaled_model_data <- moose %>% transmute(
  # Don't do harmonics for temperature as it correlates with day
  temp_start = temperature_start,
  temp_end = temperature_end,
  
  dist_to_water_end = distance_to_water_end,
  dist_to_water_end_s1 = dist_to_water_end * hour_s1_t2,
  dist_to_water_end_c1 = dist_to_water_end * hour_c1_t2,
  
  ruggedness_end = ruggedness_end,
  ruggedness_end_s1 = ruggedness_end * hour_s1_t2,
  ruggedness_end_c1 = ruggedness_end * hour_c1_t2,
  
  sl_ = sl_,
  sl_s1 = sl_ * hour_s1_t2,
  sl_c1 = sl_ * hour_c1_t2,
  
  log_sl_ = log(sl_),
  log_sl_s1 = log_sl_ * hour_s1_t2,
  log_sl_c1 = log_sl_ * hour_c1_t2,
  
  cos_ta_ = cos(ta_),
  cos_ta_s1 = cos_ta_ * hour_s1_t2,
  cos_ta_c1 = cos_ta_ * hour_c1_t2
)

scaled_model_data <- scale(unscaled_model_data)
# save the scaling values to recover the natural scale of the coefficients
mean_vals <- attr(scaled_model_data, "scaled:center")
sd_vals <- attr(scaled_model_data, "scaled:scale")

scaling_attributes_1p <- data.frame(
  variable = names(unscaled_model_data), 
  mean = mean_vals, 
  sd = sd_vals
)

moose_data_scaled_1p <- data.frame(
  animal_id = moose$animal_id,  
  step_id = moose$step_id_, 
  case = moose$case_,
  hour_s1_t2 = moose$hour_s1_t2,
  hour_c1_t2 = moose$hour_c1_t2,
  
  landuse_end = moose$landuse_end,
  scaled_model_data
)
```

## 2p

```{r}
unscaled_model_data <- moose %>% transmute(
  # Don't do harmonics for temperature as it correlates with day
  temp_start = temperature_start,
  temp_end = temperature_end,
  
  dist_to_water_end = distance_to_water_end,
  dist_to_water_end_s1 = dist_to_water_end * hour_s1_t2,
  dist_to_water_end_s2 = dist_to_water_end * hour_s2_t2,
  dist_to_water_end_c1 = dist_to_water_end * hour_c1_t2,
  dist_to_water_end_c2 = dist_to_water_end * hour_c2_t2,
  
  ruggedness_end = ruggedness_end,
  ruggedness_end_s1 = ruggedness_end * hour_s1_t2,
  ruggedness_end_s2 = ruggedness_end * hour_s2_t2,
  ruggedness_end_c1 = ruggedness_end * hour_c1_t2,
  ruggedness_end_c2 = ruggedness_end * hour_c2_t2,
  
  sl_ = sl_,
  sl_s1 = sl_ * hour_s1_t2,
  sl_s2 = sl_ * hour_s2_t2,
  sl_c1 = sl_ * hour_c1_t2,
  sl_c2 = sl_ * hour_c2_t2,
  
  log_sl_ = log(sl_),
  log_sl_s1 = log_sl_ * hour_s1_t2,
  log_sl_s2 = log_sl_ * hour_s2_t2,
  log_sl_c1 = log_sl_ * hour_c1_t2,
  log_sl_c2 = log_sl_ * hour_c2_t2,
  
  cos_ta_ = cos(ta_),
  cos_ta_s1 = cos_ta_ * hour_s1_t2,
  cos_ta_s2 = cos_ta_ * hour_s2_t2,
  cos_ta_c1 = cos_ta_ * hour_c1_t2,
  cos_ta_c2 = cos_ta_ * hour_c2_t2
)

scaled_model_data <- scale(unscaled_model_data)
# save the scaling values to recover the natural scale of the coefficients
mean_vals <- attr(scaled_model_data, "scaled:center")
sd_vals <- attr(scaled_model_data, "scaled:scale")

scaling_attributes_2p <- data.frame(
  variable = names(unscaled_model_data), 
  mean = mean_vals, 
  sd = sd_vals
)

moose_data_scaled_2p <- data.frame(
  animal_id = moose$animal_id,  
  step_id = moose$step_id_, 
  case = moose$case_,
  hour_s1_t2 = moose$hour_s1_t2,
  hour_s2_t2 = moose$hour_s2_t2,
  hour_c1_t2 = moose$hour_c1_t2,
  hour_c2_t2 = moose$hour_c2_t2,
  
  landuse_end = moose$landuse_end,
  scaled_model_data
)

```

:::

::: panel-tabset
## 0p

```{r}
model_0p <- moose_data_scaled_0p %>% fit_clogit(
  case ~ 
    landuse_end +
    landuse_end:temp_end +
    
    dist_to_water_end +
    dist_to_water_end_temp +
    
    ruggedness_end +
    # MOVEMENT KERNEL
    sl_ +
    log_sl_ +
    cos_ta_ +
    
    # RANDOM EFFECTS
    strata(animal_id) +
    strata(step_id)
)
```

## 1p

```{r}
model_1p <- moose_data_scaled_1p %>% fit_clogit(
  case ~ 
    landuse_end +
    landuse_end:hour_s1_t2 +
    landuse_end:hour_c1_t2 +
    landuse_end:temp_end +
    
    dist_to_water_end +
    dist_to_water_end_s1 +
    dist_to_water_end_c1 +
    dist_to_water_end:temp_end +
    
    ruggedness_end +
    ruggedness_end_s1 +
    ruggedness_end_c1 +
    
    # MOVEMENT KERNEL
    sl_ +
    sl_s1 +
    sl_c1 +
    
    log_sl_ +
    log_sl_s1 +
    log_sl_c1 +
    
    cos_ta_ +
    cos_ta_s1 +
    cos_ta_c1 +
    
    # RANDOM EFFECTS
    strata(animal_id) +
    strata(step_id)
)
```

## 2p

```{r}
model_2p <- moose_data_scaled_2p %>% fit_clogit(
  case ~ 
    landuse_end +
    landuse_end:hour_s1_t2 +
    landuse_end:hour_s2_t2 +
    landuse_end:hour_c1_t2 +
    landuse_end:hour_c2_t2 +
    landuse_end:temp_end +
    
    dist_to_water_end +
    dist_to_water_end_s1 +
    dist_to_water_end_s2 +
    dist_to_water_end_c1 +
    dist_to_water_end_c2 +
    dist_to_water_end:temp_end +
    
    ruggedness_end +
    ruggedness_end_s1 +
    ruggedness_end_s2 +
    ruggedness_end_c1 +
    ruggedness_end_c2 +
    
    # MOVEMENT KERNEL
    sl_ +
    sl_s1 +
    sl_s2 +
    sl_c1 +
    sl_c2 +
    
    log_sl_ +
    log_sl_s1 +
    log_sl_s2 +
    log_sl_c1 +
    log_sl_c2 +
    
    cos_ta_ +
    cos_ta_s1 +
    cos_ta_s2 +
    cos_ta_c1 +
    cos_ta_c2 +
    
    # RANDOM EFFECTS
    strata(animal_id) +
    strata(step_id)
)
```
:::

::: panel-tabset
## 0p

```{r}
coefs_clr_0p <- data.frame(
  coef = names(model_0p$model$coefficients), 
  value = unname(model_0p$model$coefficients)
)
coefs_clr_0p <- coefs_clr_0p %>%
  left_join(scaling_attributes_0p, by = c("coef" = "variable")) %>%
  mutate(value_nat = value / sd) %>%
  select(coef, value, value_nat)

head(coefs_clr_0p)
```

## 1p

```{r}
coefs_clr_1p <- data.frame(
  coef = names(model_1p$model$coefficients), 
  value = unname(model_1p$model$coefficients)
)
coefs_clr_1p <- coefs_clr_1p %>%
  left_join(scaling_attributes_1p, by = c("coef" = "variable")) %>%
  mutate(value_nat = value / sd) %>%
  select(coef, value, value_nat)

head(coefs_clr_1p)
```

## 2p

```{r}
summary(model_2p)
```

```{r}
coefs_clr_2p <- data.frame(
  coef = names(model_2p$model$coefficients), 
  value = unname(model_2p$model$coefficients)
)
coefs_clr_2p <- coefs_clr_2p %>%
  left_join(scaling_attributes_2p, by = c("coef" = "variable")) %>%
  mutate(value_nat = value / sd) %>%
  select(coef, value, value_nat)

head(coefs_clr_2p)

```
:::

::: panel-tabset
## Setup

```{r}
create_harmonics_scaled_long <- function(hour_harmonics_df, coefs_clr, hour_seq = seq(0, 24, 1)) {
  # Create the hour sequence
  hour <- hour_seq
  
  # Create the dataframe of scaled harmonic terms
  harmonics_scaled_df <- data.frame(
    "hour" = hour,
    
    # LANDUSE
    "Dedicious & mixed forest" = coefs_clr %>% 
      filter(grepl("landuse_endDedicious & mixed forest", coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Clear-cut & young forest" = coefs_clr %>% 
      filter(grepl("landuse_endClear-cut & young forest", coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Open" = coefs_clr %>% 
      filter(grepl("landuse_endOpen", coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Wetland" = coefs_clr %>% 
      filter(grepl("landuse_endWetland", coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Water bodies" = coefs_clr %>% 
      filter(grepl("landuse_endWater bodies", coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Low mountain forest" = coefs_clr %>% 
      filter(grepl("landuse_endLow mountain forest",coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    # GEOGRAPHY    
    "Ruggedness" = coefs_clr %>% 
      filter(grepl("ruggedness_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Dist. to Water" = coefs_clr %>% 
      filter(grepl("dist_to_water_end",coef) & !grepl("temp_end", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    # MOVEMENT KERNEL
    "Step Length" = coefs_clr %>% 
      filter(grepl("sl_", coef) & !grepl("log", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "Log Step Length" = coefs_clr %>% 
      filter(grepl("log_sl_", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.),
    
    "cos(turning angle)" = coefs_clr %>% 
      filter(grepl("cos_ta_", coef)) %>% 
      pull(value) %>% t() %*% t(as.matrix(hour_harmonics_df)) %>% as.numeric(.)
  )
  
  # Convert the dataframe to long format
  harmonics_scaled_long <- pivot_longer(harmonics_scaled_df, cols = -1, names_to = "coef")
  
  return(harmonics_scaled_long)
}

```

## 0p

```{r}
hour_harmonics_df_0p <- data.frame("linear_term" = rep(1, length(hour)))
harmonics_scaled_long_0p <- create_harmonics_scaled_long(hour_harmonics_df_0p, coefs_clr_0p)
```

## 1p

```{r}
hour_harmonics_df_1p <- data.frame("linear_term" = rep(1, length(hour)),
                                   "hour_s1" = sin(2*pi*hour/24),
                                   "hour_c1" = cos(2*pi*hour/24))
harmonics_scaled_long_1p <- create_harmonics_scaled_long(hour_harmonics_df_1p, coefs_clr_1p)
```

## 2p

```{r}
hour_harmonics_df_2p <- data.frame("linear_term" = rep(1, length(hour)),
                                "hour_s1" = sin(2*pi*hour/24),
                                "hour_s2" = sin(4*pi*hour/24),
                                "hour_c1" = cos(2*pi*hour/24),
                                "hour_c2" = cos(4*pi*hour/24))
harmonics_scaled_long_2p <- create_harmonics_scaled_long(hour_harmonics_df_2p, coefs_clr_2p)
```
:::

::: panel-tabset
## 0p

```{r}
ggplot() +
    geom_path(data = harmonics_scaled_long_0p,
              aes(x = hour, y = value, colour = coef)) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_y_continuous(expression(Time-varying~parameter~values~beta)) +
    scale_x_continuous("Hour") +
    scale_color_discrete("Estimate") +
    theme_classic() +
    theme(legend.position = "bottom")
```

## 1p

```{r}
ggplot() +
    geom_path(data = harmonics_scaled_long_1p,
              aes(x = hour, y = value, colour = coef)) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_y_continuous(expression(Time-varying~parameter~values~beta)) +
    scale_x_continuous("Hour") +
    scale_color_discrete("Estimate") +
    theme_classic() +
    theme(legend.position = "bottom")
```

## 2p

```{r}
ggplot() +
    geom_path(data = harmonics_scaled_long_2p,
              aes(x = hour, y = value, colour = coef)) +
    geom_hline(yintercept = 0, linetype = "dashed") +
    scale_y_continuous(expression(Time-varying~parameter~values~beta)) +
    scale_x_continuous("Hour") +
    scale_color_discrete("Estimate") +
    theme_classic() +
    theme(legend.position = "bottom")
```
:::
